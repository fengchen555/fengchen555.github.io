<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>排序算法</title>
    <url>/posts/735e5788/</url>
    <content><![CDATA[<h1 id="排序算法"><a href="#排序算法" class="headerlink" title="排序算法"></a>排序算法</h1><p>由于最近这阵子一直想找个实习，而实习面试的一个重要知识点就是手撕代码，而手撕代码里让你手写排序还是可能的，手写个快排，归并排序……当然应该不会让我手撕堆排序吧….</p>
<p>因此，并且刷到了一道题，使用O(nlogn)的时间实现对链表的排序，思来想去只有用归并排序来写是最方便的。但是又写不出来<del>好吧，其实是我忘了</del>。特地复习一下。</p>
<h2 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>归并排序（merge sort）是高效的基于比较的稳定排序算法。</p>
<h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><p>基于分治算法，将需要排序的数组，分段排序后，合并排序。时间复杂度很稳定，都是O(nlogn)</p>
<h3 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h3><p>归并排序最核心的部分在于合并的过程：即将两个有序的数组 <code>a[i]</code> 和 <code>b[j]</code> 合并为一个有序数组 <code>c[k]</code>。</p>
<p>从左往右枚举 <code>a[i]</code> 和 <code>b[j]</code>，找出最小的值并放入数组 <code>c[k]</code>；重复上述过程直到 <code>a[i]</code> 和 <code>b[j]</code> 有一个为空时，将另一个数组剩下的元素放入 <code>c[k]</code>。</p>
<p>然后根据<code>a[i]</code> 和 <code>b[j]</code>哪一个不为空，将它加入到剩下的<code>c[j]</code>中。</p>
<p>为保证排序的稳定性，前段首元素小于或等于后段首元素时（<code>a[i] &lt;= b[j]</code>）而非小于时（<code>a[i] &lt; b[j]</code>）就要作为最小值放入 <code>c[k]</code>。</p>
<h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><p><del>明天继续写</del></p>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>排序</tag>
      </tags>
  </entry>
  <entry>
    <title>JVM的内存收集算法</title>
    <url>/posts/9214f759/</url>
    <content><![CDATA[<h2 id="GC-的分类"><a href="#GC-的分类" class="headerlink" title="GC 的分类"></a>GC 的分类</h2><ul>
<li>部分收集<ul>
<li>新生代收集（Minor GC &#x2F; Young GC）：只对新生代进行垃圾收集；</li>
<li>老年代收集（Major GC &#x2F; Old GC）：只对老年代进行垃圾收集。</li>
</ul>
</li>
<li>混合收集（Mixed GC）：对整个新生代和部分老年代进行垃圾收集。</li>
<li>整堆收集 (Full GC)：收集整个 Java 堆和方法区。</li>
</ul>
<p>需要注意的是：有的时候Major GC也是代表Full GC</p>
<h2 id="空间分配担保"><a href="#空间分配担保" class="headerlink" title="空间分配担保"></a>空间分配担保</h2><p>空间分配担保其实就是在进行年轻代的回收时，需要确保老年代本身还有容纳年轻代的空间。</p>
<ul>
<li>JDK 6 Update 24 之前，在发生 Minor GC 之前，虚拟机必须先检查老年代最大可用的连续空间是否大于新生代所有对象总空间</li>
<li>JDK 6 Update 24 之后的规则变为只要老年代的连续空间大于新生代对象总大小或者历次晋升的平均大小，就会进行 Minor GC，否则将进行 Full GC。</li>
</ul>
<h2 id="死亡对象的方法"><a href="#死亡对象的方法" class="headerlink" title="死亡对象的方法"></a>死亡对象的方法</h2><p>一般来说有两种方法，引用计数法、可达性分析法。</p>
<h3 id="引用计数法"><a href="#引用计数法" class="headerlink" title="引用计数法"></a>引用计数法</h3><p>给对象中添加一个引用计数器：</p>
<ul>
<li>每当有一个地方引用它，计数器就加 1；</li>
<li>当引用失效，计数器就减 1；</li>
<li>任何时候计数器为 0 的对象就是不可能再被使用的。</li>
</ul>
<p>优点：使用特别简单。</p>
<p>缺点：难以解决相互引用，引用依赖的问题。</p>
<h3 id="可达性分析法"><a href="#可达性分析法" class="headerlink" title="可达性分析法"></a>可达性分析法</h3><p>“GC Roots”根对象集作为起始点集合，从这些节点开始，根据引用关系向下搜索，搜索过程路径称为“引用链”。如果，某对象到GC Root没有引用链相关联，那么，就是GC Root到对象不可达，则证明这个对象不可能再被使用。</p>
<h3 id="GC-Roots有哪些"><a href="#GC-Roots有哪些" class="headerlink" title="GC Roots有哪些"></a>GC Roots有哪些</h3><ul>
<li>虚拟机栈中引用的对象，如：线程中被调用的方法堆栈中使用的参数、局部变量、临时变量。</li>
<li>方法区中类静态属性引用的对象。</li>
<li>方法区中常量引用的对象，比如：字符串常量池里的引用。</li>
<li>本地方法栈中JNI引用的对象。</li>
<li>Java虚拟机内部的引用，比如：基本数据类型对应的Class对象、常驻异常对象、系统类加载器，如：String、NullPointExcepition等。</li>
<li>所有被同步锁持有的对象（synchronized关键字）。</li>
<li>反映Java虚拟机内部情况的JMXBean、JVMTI中注册的回调、本地代码缓存等。</li>
</ul>
<p>然而需要注意的是对象可以被回收并不代表立即就被回收。还需要根据对应的收集算法，进行一定的标记才会被收集。</p>
]]></content>
      <categories>
        <category>Java知识点</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>JVM</tag>
      </tags>
  </entry>
  <entry>
    <title>力扣hot100 (1)</title>
    <url>/posts/3b9e99bc/</url>
    <content><![CDATA[<h1 id="力扣hot100-（1）"><a href="#力扣hot100-（1）" class="headerlink" title="力扣hot100 （1）"></a>力扣hot100 （1）</h1><p>在一段时间前，曾经一直在写代码随想录的题目，虽然那里的比较全面，但是感觉还是有点慢，题目也太多了吧。然后又想着去找点实习做，一点点地写不知道得到什么时候去。所以随即想到直接刷一些比较好的题库好了。hot100就决定是你了。</p>
<p><img src="http://typora-image-fengchen.oss-cn-beijing.aliyuncs.com/img/image-20240326204727168.png" alt="image-20240326204727168"></p>
<p>写了差不多两天，把双指针和哈希的这两块给做完了。</p>
<h2 id="哈希"><a href="#哈希" class="headerlink" title="哈希"></a>哈希</h2><p>哈希这块没什么难的，主要是这个最长连续序列这个有点难度。</p>
<h3 id="128-最长连续序列"><a href="#128-最长连续序列" class="headerlink" title="128. 最长连续序列"></a>128. 最长连续序列</h3><p>题目是这样的</p>
<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">128. 最长连续序列</span><br><span class="line">给定一个未排序的整数数组 nums ，找出数字连续的最长序列（不要求序列元素在原数组中连续）的长度。</span><br><span class="line"></span><br><span class="line">请你设计并实现时间复杂度为 O(n) 的算法解决此问题。</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">示例 1：</span><br><span class="line"></span><br><span class="line">输入：nums = [100,4,200,1,3,2]</span><br><span class="line">输出：4</span><br><span class="line">解释：最长数字连续序列是 [1, 2, 3, 4]。它的长度为 4。</span><br><span class="line">示例 2：</span><br><span class="line"></span><br><span class="line">输入：nums = [0,3,7,2,5,8,4,6,0,1]</span><br><span class="line">输出：9</span><br></pre></td></tr></table></figure>

<p>一开始着实没有什么思路，只想到可以sort一下，然后直接看不就好了吗。但是又看到题目要求说需要时间复杂度O(n),排序一次了肯定也不止了吧。</p>
<p>然后想到了用哈希，遍历一次，添加进去。然后再遍历每个数。找到最长的连续值。但是这个方法太慢了，可能因为哈希表生性慢些吧。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//其实就是一定存在一个最长连续的序列，然后哪个序列一定存在一个最小的值，而那个最小的值一直寻找到最大的值的长度不就是最长的长度了吗</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">longestConsecutive</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        HashMap&lt;Integer,Integer&gt; hm = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">            hm.put(nums[i], <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">max</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">cur</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> num : nums) &#123;</span><br><span class="line">            <span class="keyword">if</span>(!hm.containsKey(num-<span class="number">1</span>)) &#123;</span><br><span class="line">                cur = <span class="number">1</span>;</span><br><span class="line">                <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> num;</span><br><span class="line">                <span class="keyword">while</span> (hm.containsKey(temp+<span class="number">1</span>)) &#123;</span><br><span class="line">                    cur++;</span><br><span class="line">                    temp++;</span><br><span class="line">                &#125;</span><br><span class="line">                max = Math.max(max, cur);</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> max;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>随即看一下题解，进行了学习一番。</p>
<h4 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h4><p>如何在一个O（n）的时间内完成，并且还能更加优化呢。用Set集合不就可以了吗，我怎么没想到了，随即改为Set实现。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">longestConsecutive</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        Set&lt;Integer&gt; set=<span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j : nums) &#123;</span><br><span class="line">            set.add(j);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">max</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">cur</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> num : set) &#123;</span><br><span class="line">            <span class="keyword">if</span>(!set.contains(num-<span class="number">1</span>)) &#123;</span><br><span class="line">                cur = <span class="number">1</span>;</span><br><span class="line">                <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> num;</span><br><span class="line">                <span class="keyword">while</span> (set.contains(temp+<span class="number">1</span>)) &#123;</span><br><span class="line">                    cur++;</span><br><span class="line">                    temp++;</span><br><span class="line">                &#125;</span><br><span class="line">                max = Math.max(max, cur);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> max;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="双指针"><a href="#双指针" class="headerlink" title="双指针"></a>双指针</h2><h3 id="283-移动零"><a href="#283-移动零" class="headerlink" title="283. 移动零"></a><a href="https://leetcode.cn/problems/move-zeroes/">283. 移动零</a></h3><figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">给定一个数组 nums，编写一个函数将所有 0 移动到数组的末尾，同时保持非零元素的相对顺序。</span><br><span class="line"></span><br><span class="line">请注意 ，必须在不复制数组的情况下原地对数组进行操作。</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">示例 1:</span><br><span class="line"></span><br><span class="line">输入: nums = [0,1,0,3,12]</span><br><span class="line">输出: [1,3,12,0,0]</span><br><span class="line">示例 2:</span><br><span class="line"></span><br><span class="line">输入: nums = [0]</span><br><span class="line">输出: [0]</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">提示:</span><br><span class="line"></span><br><span class="line">1 &lt;= nums.length &lt;= 104</span><br><span class="line">-231 &lt;= nums[i] &lt;= 231 - 1</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">进阶：你能尽量减少完成的操作次数吗？</span><br></pre></td></tr></table></figure>

<p>这道题主要是在于，在当前数组上完成操作，其实就是以为着要一直交换。</p>
]]></content>
      <categories>
        <category>力扣刷题</category>
      </categories>
      <tags>
        <tag>hot100</tag>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title>力扣刷题周记(1)</title>
    <url>/posts/a298d6c9/</url>
    <content><![CDATA[<h2 id="回溯算法"><a href="#回溯算法" class="headerlink" title="回溯算法"></a>回溯算法</h2><p>这几天写了几个回溯算法，感觉回溯算法的主要几个要点</p>
<ol>
<li>什么时候回溯终止</li>
<li>如何选择下一个节点</li>
<li>进行怎么样的回溯</li>
</ol>
]]></content>
  </entry>
  <entry>
    <title>my first blog</title>
    <url>/posts/d63b390f/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/posts/4a17b156/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
</search>
