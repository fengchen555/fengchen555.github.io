<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hello World</title>
    <url>/posts/4a17b156/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>my first blog</title>
    <url>/posts/d63b390f/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>力扣刷题周记(1)</title>
    <url>/posts/a298d6c9/</url>
    <content><![CDATA[<h2 id="回溯算法"><a href="#回溯算法" class="headerlink" title="回溯算法"></a>回溯算法</h2><p>这几天写了几个回溯算法，感觉回溯算法的主要几个要点</p>
<ol>
<li>什么时候回溯终止</li>
<li>如何选择下一个节点</li>
<li>进行怎么样的回溯</li>
</ol>
]]></content>
  </entry>
  <entry>
    <title>力扣hot100 (1)</title>
    <url>/posts/3b9e99bc/</url>
    <content><![CDATA[<h1 id="力扣hot100-（1）"><a href="#力扣hot100-（1）" class="headerlink" title="力扣hot100 （1）"></a>力扣hot100 （1）</h1><p>在一段时间前，曾经一直在写代码随想录的题目，虽然那里的比较全面，但是感觉还是有点慢，题目也太多了吧。然后又想着去找点实习做，一点点地写不知道得到什么时候去。所以随即想到直接刷一些比较好的题库好了。hot100就决定是你了。</p>
<p><img src="http://typora-image-fengchen.oss-cn-beijing.aliyuncs.com/img/image-20240326204727168.png" alt="image-20240326204727168"></p>
<p>写了差不多两天，把双指针和哈希的这两块给做完了。</p>
<h2 id="哈希"><a href="#哈希" class="headerlink" title="哈希"></a>哈希</h2><p>哈希这块没什么难的，主要是这个最长连续序列这个有点难度。</p>
<h3 id="128-最长连续序列"><a href="#128-最长连续序列" class="headerlink" title="128. 最长连续序列"></a>128. 最长连续序列</h3><p>题目是这样的</p>
<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">128. 最长连续序列</span><br><span class="line">给定一个未排序的整数数组 nums ，找出数字连续的最长序列（不要求序列元素在原数组中连续）的长度。</span><br><span class="line"></span><br><span class="line">请你设计并实现时间复杂度为 O(n) 的算法解决此问题。</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">示例 1：</span><br><span class="line"></span><br><span class="line">输入：nums = [100,4,200,1,3,2]</span><br><span class="line">输出：4</span><br><span class="line">解释：最长数字连续序列是 [1, 2, 3, 4]。它的长度为 4。</span><br><span class="line">示例 2：</span><br><span class="line"></span><br><span class="line">输入：nums = [0,3,7,2,5,8,4,6,0,1]</span><br><span class="line">输出：9</span><br></pre></td></tr></table></figure>

<p>一开始着实没有什么思路，只想到可以sort一下，然后直接看不就好了吗。但是又看到题目要求说需要时间复杂度O(n),排序一次了肯定也不止了吧。</p>
<p>然后想到了用哈希，遍历一次，添加进去。然后再遍历每个数。找到最长的连续值。但是这个方法太慢了，可能因为哈希表生性慢些吧。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//其实就是一定存在一个最长连续的序列，然后哪个序列一定存在一个最小的值，而那个最小的值一直寻找到最大的值的长度不就是最长的长度了吗</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">longestConsecutive</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        HashMap&lt;Integer,Integer&gt; hm = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">            hm.put(nums[i], <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">max</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">cur</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> num : nums) &#123;</span><br><span class="line">            <span class="keyword">if</span>(!hm.containsKey(num-<span class="number">1</span>)) &#123;</span><br><span class="line">                cur = <span class="number">1</span>;</span><br><span class="line">                <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> num;</span><br><span class="line">                <span class="keyword">while</span> (hm.containsKey(temp+<span class="number">1</span>)) &#123;</span><br><span class="line">                    cur++;</span><br><span class="line">                    temp++;</span><br><span class="line">                &#125;</span><br><span class="line">                max = Math.max(max, cur);</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> max;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>随即看一下题解，进行了学习一番。</p>
<h4 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h4><p>如何在一个O（n）的时间内完成，并且还能更加优化呢。用Set集合不就可以了吗，我怎么没想到了，随即改为Set实现。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">longestConsecutive</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        Set&lt;Integer&gt; set=<span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j : nums) &#123;</span><br><span class="line">            set.add(j);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">max</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">cur</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> num : set) &#123;</span><br><span class="line">            <span class="keyword">if</span>(!set.contains(num-<span class="number">1</span>)) &#123;</span><br><span class="line">                cur = <span class="number">1</span>;</span><br><span class="line">                <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> num;</span><br><span class="line">                <span class="keyword">while</span> (set.contains(temp+<span class="number">1</span>)) &#123;</span><br><span class="line">                    cur++;</span><br><span class="line">                    temp++;</span><br><span class="line">                &#125;</span><br><span class="line">                max = Math.max(max, cur);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> max;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>力扣刷题</category>
      </categories>
      <tags>
        <tag>hot100</tag>
        <tag>LeetCode</tag>
      </tags>
  </entry>
</search>
